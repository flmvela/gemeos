import{s as i}from"./index-DeyQCVxu.js";class g{async getAvailableDomainsForTeacher(){var n;try{const{data:{user:e},error:u}=await i.auth.getUser();if(u||!e)throw new Error("Authentication required");const{data:o,error:m}=await i.from("user_tenants").select(`
          tenant_id,
          tenant:tenants!inner(
            id,
            name,
            tenant_domains!inner(
              domain:domains!inner(
                id,
                name,
                description
              )
            )
          )
        `).eq("user_id",e.id).eq("status","active");if(m)throw console.error("Error fetching user tenants:",m),new Error("Failed to load accessible domains");const c=[],s=new Map;for(const _ of o||[]){const d=((n=_.tenant)==null?void 0:n.tenant_domains)||[];for(const l of d){const t=l.domain;t&&!s.has(t.id)&&s.set(t.id,{id:t.id,name:t.name,description:t.description,difficulty_levels:[]})}}if(c.push(...s.values()),c.length>0){const _=c.map(t=>t.id),{data:d,error:l}=await i.from("difficulty_level_labels").select("*").in("domain_id",_).order("level_order");if(!l&&d)for(const t of d){const f=c.find(r=>r.id===t.domain_id);f&&f.difficulty_levels.push({id:t.id,level_name:t.level_name,level_order:t.level_order,description:t.description,color_code:t.color_code})}}return c}catch(e){throw console.error("Error in getAvailableDomainsForTeacher:",e),e}}async createClass(n){try{const{data:{user:e},error:u}=await i.auth.getUser();if(u||!e)throw new Error("Authentication required");const{data:o,error:m}=await i.from("user_tenants").select("tenant_id").eq("user_id",e.id).eq("status","active").limit(1);if(m||!o||o.length===0)throw new Error("No active tenant found");const c=o[0].tenant_id,s={class_name:n.configuration.className,description:n.configuration.description,difficulty_level_id:n.configuration.difficultyLevelId,frequency:n.configuration.frequency,allows_student_messages:n.configuration.allowsStudentMessages,max_students:n.configuration.maxStudents,domain_id:n.domain.selectedDomainId,tenant_id:c,sessions:n.sessions.map(r=>({session_name:r.sessionName,session_date:r.sessionDate,start_time:r.startTime,end_time:r.endTime,time_zone:r.timeZone})),students:n.students.students.map(r=>({first_name:r.firstName,last_name:r.lastName,email:r.email,custom_message:r.customMessage||n.students.defaultCustomMessage}))},{data:_,error:d}=await i.from("classes").insert({teacher_id:e.id,tenant_id:s.tenant_id,domain_id:s.domain_id,class_name:s.class_name,description:s.description,difficulty_level_id:s.difficulty_level_id,frequency:s.frequency,allows_student_messages:s.allows_student_messages,max_students:s.max_students,status:"active"}).select("id").single();if(d||!_)throw console.error("Error creating class:",d),new Error("Failed to create class");const l=_.id;let t=0;if(s.sessions.length>0){const{data:r,error:h}=await i.from("class_sessions").insert(s.sessions.map(a=>({class_id:l,session_name:a.session_name,session_date:a.session_date,start_time:a.start_time,end_time:a.end_time,time_zone:a.time_zone,status:"scheduled"})));h||(t=s.sessions.length)}let f=0;if(s.students.length>0){const{data:r,error:h}=await i.from("class_invitations").insert(s.students.map(a=>({class_id:l,email:a.email,first_name:a.first_name,last_name:a.last_name,custom_message:a.custom_message,invited_by:e.id,status:"pending"})));h||(f=s.students.length)}return{class_id:l,success:!0,sessions_created:t,invitations_sent:f}}catch(e){throw console.error("Error in createClass:",e),e}}async canTeacherCreateClassInDomain(n){try{const{data:{user:e},error:u}=await i.auth.getUser();if(u||!e)return!1;const{data:o,error:m}=await i.rpc("can_teacher_create_class_in_domain",{p_teacher_id:e.id,p_domain_id:n,p_tenant_id:""});return!m&&o===!0}catch(e){return console.error("Error checking teacher permissions:",e),!1}}}const y=new g;export{y as classService};
